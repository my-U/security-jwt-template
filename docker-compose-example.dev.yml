# docker-compose-example.dev.yml
# ⚠ 이 파일은 예시입니다.
# 'docker-compose.dev.yml'로 이름을 바꾸고
# 프로젝트에 맞게 값을 입력하여 사용하세요.

services: # 생성되는 순서 중요

  # MySQL 서비스
  mysql:
    image: mysql:8.0
    container_name: mysql-container # 🔧 프로젝트에 맞게 값을 설정 해주세요.
    env_file:
      - .env.common
      - .env.dev
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DATABASE}
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3306:3306"
    volumes:
      - ./mysql-data:/var/lib/mysql
      - ./mysql-init/init.sql:/docker-entrypoint-initdb.d/init.sql

  # PostgreSQL 서비스 (필요 시 주석 해제)
  postgres:
    image: postgres:15
    container_name: postgresql-container # 🔧 프로젝트에 맞게 값을 설정 해주세요.
    env_file:
      - .env.common
      - .env.dev
    environment:
      POSTGRES_DB: ${DATABASE}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./postgres-init/init.sql:/docker-entrypoint-initdb.d/init.sql

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-container # 🔧 프로젝트에 맞게 값을 설정 해주세요.
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-container # 🔧 프로젝트에 맞게 값을 설정 해주세요.
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  # Redis 서비스
  redis:
    image: redis:latest # 🔧 프로젝트에 맞게 값을 설정 해주세요.
    container_name: redis-container  # 🔧 프로젝트에 맞게 값을 설정 해주세요.
    ports:
      - "6379:6379"